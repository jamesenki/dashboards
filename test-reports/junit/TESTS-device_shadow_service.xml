<testsuite name="device_shadow_service.Device Shadow Service API" tests="4" errors="0" failures="2" skipped="0" time="0.009815" timestamp="2025-04-10T08:41:54.673669" hostname="Lisas-Mac-mini.local"><testcase classname="device_shadow_service.Device Shadow Service API" name="Get device shadow state" status="failed" time="0.005324"><failure type="AssertionError" message="Expected status code 200, got 404">
<![CDATA[
Failing step: Then the response should be successful ... failed in 0.000s
Location: features/device_shadow_service.feature:16
Assertion Failed: Expected status code 200, got 404
Captured logging:
INFO:builtins:Setting up test device: test-device-001
INFO:builtins:Using mock data for device: test-device-001
INFO:builtins:Requesting shadow state for device: test-device-001
INFO:httpx:HTTP Request: GET http://testserver/api/shadows/test-device-001 "HTTP/1.1 404 Not Found"
INFO:builtins:Received response with status code: 404
INFO:builtins:Verifying successful response]]>
</failure><system-out>
<![CDATA[
@scenario.begin

  @api @current @device-operation @red
  Scenario: Get device shadow state
    Given a device with ID "test-device-001" exists in the system ... passed in 0.000s
    When a client requests the shadow state for device "test-device-001" ... passed in 0.005s
    Then the response should be successful ... failed in 0.000s
    And the shadow document should contain "reported" and "desired" sections ... skipped in 0.000s
    And the response should include the device ID "test-device-001" ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="device_shadow_service.Device Shadow Service API" name="Update device shadow desired state" status="failed" time="0.002046"><failure type="AssertionError" message="Expected status code 200, got 404">
<![CDATA[
Failing step: Then the response should be successful ... failed in 0.000s
Location: features/device_shadow_service.feature:27
Assertion Failed: Expected status code 200, got 404
Captured logging:
INFO:builtins:Setting up test device: test-device-001
INFO:builtins:Using mock data for device: test-device-001
INFO:builtins:Updating desired state
INFO:builtins:Update data: {'target_temperature': '125'}
INFO:httpx:HTTP Request: PATCH http://testserver/api/shadows/test-device-001/desired "HTTP/1.1 404 Not Found"
INFO:builtins:Received response with status code: 404
INFO:builtins:Verifying successful response]]>
</failure><system-out>
<![CDATA[
@scenario.begin

  @api @current @device-operation @red
  Scenario: Update device shadow desired state
    Given a device with ID "test-device-001" exists in the system ... passed in 0.000s
    When a client updates the desired state with ... passed in 0.002s
      | property           | value |
      | target_temperature | 125   |
    Then the response should be successful ... failed in 0.000s
    And the updated shadow should contain the new desired property "target_temperature" with value "125" ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="device_shadow_service.Device Shadow Service API" name="Device shadow does not exist" status="passed" time="0.001938"><system-out>
<![CDATA[
@scenario.begin

  @api @current @device-operation @red
  Scenario: Device shadow does not exist
    Given a device with ID "non-existent-device" does not exist in the system ... passed in 0.000s
    When a client requests the shadow state for device "non-existent-device" ... passed in 0.002s
    Then the response should indicate the resource was not found ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="device_shadow_service.Device Shadow Service API" name="Receive real-time shadow updates via WebSocket" status="passed" time="0.000507"><system-out>
<![CDATA[
@scenario.begin

  @api @current @device-operation @websocket @red
  Scenario: Receive real-time shadow updates via WebSocket
    Given a device with ID "test-device-001" exists in the system ... passed in 0.000s
    And a WebSocket connection is established for device "test-device-001" ... passed in 0.000s
    When the device reports a state change to ... passed in 0.000s
      | property    | value  |
      | temperature | 130    |
      | status      | ONLINE |
    Then the WebSocket client should receive a shadow update ... passed in 0.000s
    And the update should contain the new reported values ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>
