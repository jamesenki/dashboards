"""
Message Broker Adapter for IoTSphere platform.

This module provides an adapter for interacting with an AMQP-based message broker
(such as RabbitMQ) to publish and subscribe to messages in a decoupled architecture.
The adapter follows Clean Architecture principles by providing an implementation of
the messaging interface required by the application's use cases.
"""
import asyncio
import json
import logging
import re
from dataclasses import dataclass, field
from datetime import datetime
from typing import Any, Callable, Dict, List, Optional, Set

import aio_pika
from aio_pika import ExchangeType, Message

logger = logging.getLogger(__name__)


class TopicPattern:
    """
    Represents a topic pattern for message routing.

    Handles AMQP-style topic patterns with wildcards:
    - '*' matches exactly one word
    - '#' matches zero or more words
    """

    def __init__(self, pattern: str):
        """
        Initialize a topic pattern.

        Args:
            pattern: The topic pattern string (e.g., "devices.*.shadow.#")
        """
        self.pattern = pattern

    def single_wildcard_pattern(self) -> str:
        """
        Convert AMQP single-wildcard pattern to regex pattern.

        Replaces '*' with regex to match a single word and escapes dots.

        Returns:
            A regex pattern string
        """
        # Escape dots and replace '*' with regex for one segment
        return re.sub(r'\*', r'[^.]+', re.escape(self.pattern))

    def multi_wildcard_pattern(self) -> str:
        """
        Convert AMQP multi-wildcard pattern to regex pattern.

        Replaces '#' with regex to match multiple segments and escapes dots.

        Returns:
            A regex pattern string
        """
        # Escape dots and replace '#' with regex for multiple segments
        return re.sub(r'#', r'.*', re.escape(self.pattern))

    def matches_topic(self, topic: str) -> bool:
        """
        Check if a topic matches this pattern.

        Args:
            topic: The topic to check against this pattern

        Returns:
            True if the topic matches the pattern, False otherwise
        """
        # Convert AMQP wildcards to regex patterns
        single_pattern = self.single_wildcard_pattern()
        multi_pattern = self.multi_wildcard_pattern()

        # Create a combined pattern
        regex_pattern = f"^{multi_pattern}$"

        # Check if the topic matches the pattern
        return re.match(regex_pattern, topic) is not None


@dataclass
class MessagePublishRequest:
    """
    Request to publish a message to the message broker.
    """
    topic: str
    message: Any
    message_id: Optional[str] = None
    correlation_id: Optional[str] = None
    content_type: str = "application/json"
    headers: Dict[str, Any] = field(default_factory=dict)


@dataclass
class MessageSubscriptionRequest:
    """
    Request to subscribe to messages from the message broker.
    """
    topic_pattern: TopicPattern
    queue_name: str
    callback: Callable[[Any], None]
    exclusive: bool = False
    auto_delete: bool = False


@dataclass
class MessageSubscription:
    """
    Internal representation of a message subscription.
    """
    topic_pattern: TopicPattern
    queue_name: str
    callback: Callable[[Any], None]
    consumer_tag: Optional[str] = None


class MessageBrokerAdapter:
    """
    Adapter for interacting with an AMQP-based message broker.

    Provides methods for publishing messages to topics and subscribing
    to topics with support for wildcards. Implements the infrastructure
    layer component of Clean Architecture.
    """

    def __init__(
        self,
        broker_url: str = "amqp://guest:guest@localhost:5672/",
        exchange_name: str = "iotsphere.events",
        reconnect_interval: int = 5
    ):
        """
        Initialize the Message Broker Adapter.

        Args:
            broker_url: The URL of the message broker
            exchange_name: The name of the exchange to use
            reconnect_interval: The interval in seconds to wait between reconnection attempts
        """
        self.broker_url = broker_url
        self.exchange_name = exchange_name
        self.reconnect_interval = reconnect_interval
        self.initialized = False
        self.connection = None
        self.channel = None
        self.exchange = None
        self.subscribers = {}  # consumer_tag -> MessageSubscription

    async def initialize(self) -> None:
        """
        Initialize the connection to the message broker.

        Creates a connection, channel, and exchange.
        """
        # Connect to the message broker
        self.connection = await aio_pika.connect_robust(
            self.broker_url,
            reconnect_interval=self.reconnect_interval
        )

        # Create a channel
        self.channel = await self.connection.channel()

        # Declare the exchange
        self.exchange = await self.channel.declare_exchange(
            self.exchange_name,
            ExchangeType.TOPIC,
            durable=True
        )

        self.initialized = True
        logger.info(f"Connected to message broker at {self.broker_url}")

    async def close(self) -> None:
        """
        Close the connection to the message broker.
        """
        if self.connection:
            await self.connection.close()
            self.initialized = False
            logger.info("Disconnected from message broker")

    def _create_message(
        self,
        data: Any,
        content_type: str = "application/json",
        message_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        headers: Optional[Dict[str, Any]] = None
    ) -> Message:
        """
        Create a message to publish to the message broker.

        Args:
            data: The message data
            content_type: The content type of the message
            message_id: An optional message ID
            correlation_id: An optional correlation ID
            headers: Optional headers for the message

        Returns:
            An AMQP message
        """
        # Serialize the data
        if content_type == "application/json":
            body = json.dumps(data).encode()
        else:
            body = data if isinstance(data, bytes) else str(data).encode()

        # Create message properties
        message_properties = {
            "content_type": content_type,
            "timestamp": datetime.now(),
            "headers": headers or {}
        }

        if message_id:
            message_properties["message_id"] = message_id

        if correlation_id:
            message_properties["correlation_id"] = correlation_id

        # Create and return the message
        return Message(
            body=body,
            **message_properties
        )

    async def publish(self, request: MessagePublishRequest) -> None:
        """
        Publish a message to the message broker.

        Args:
            request: The publish request containing the topic and message

        Raises:
            RuntimeError: If the adapter is not initialized
        """
        if not self.initialized:
            raise RuntimeError("MessageBrokerAdapter must be initialized before publishing")

        # Create the message
        message = self._create_message(
            data=request.message,
            content_type=request.content_type,
            message_id=request.message_id,
            correlation_id=request.correlation_id,
            headers=request.headers
        )

        # Publish the message
        await self.exchange.publish(
            message=message,
            routing_key=request.topic
        )

        logger.debug(f"Published message to topic {request.topic}")

    async def subscribe(self, request: MessageSubscriptionRequest) -> str:
        """
        Subscribe to messages from the message broker.

        Args:
            request: The subscription request

        Returns:
            The consumer tag for the subscription

        Raises:
            RuntimeError: If the adapter is not initialized
        """
        if not self.initialized:
            raise RuntimeError("MessageBrokerAdapter must be initialized before subscribing")

        # Declare the queue
        queue = await self.channel.declare_queue(
            request.queue_name,
            exclusive=request.exclusive,
            auto_delete=request.auto_delete
        )

        # Bind the queue to the exchange with the topic pattern
        await queue.bind(
            self.exchange,
            routing_key=request.topic_pattern.pattern
        )

        # Start consuming messages
        consumer_tag = await queue.consume(
            callback=lambda message: self._process_message(message, None)
        )

        # Store the subscription
        self.subscribers[consumer_tag] = MessageSubscription(
            topic_pattern=request.topic_pattern,
            queue_name=request.queue_name,
            callback=request.callback,
            consumer_tag=consumer_tag
        )

        logger.debug(f"Subscribed to {request.topic_pattern.pattern} with queue {request.queue_name}")
        return consumer_tag

    async def unsubscribe(self, consumer_tag: str) -> None:
        """
        Unsubscribe from messages.

        Args:
            consumer_tag: The consumer tag returned from subscribe

        Raises:
            RuntimeError: If the adapter is not initialized
        """
        if not self.initialized:
            raise RuntimeError("MessageBrokerAdapter must be initialized before unsubscribing")

        if consumer_tag in self.subscribers:
            # Cancel the consumer
            await self.channel.basic_cancel(consumer_tag)

            # Remove the subscription
            del self.subscribers[consumer_tag]

            logger.debug(f"Unsubscribed from consumer {consumer_tag}")

    async def _process_message(self, message: Message, consumer_tag: Optional[str]) -> None:
        """
        Process a message received from the message broker.

        Invokes the appropriate callback for the message.

        Args:
            message: The AMQP message
            consumer_tag: The consumer tag that received the message
        """
        # Extract the consumer tag from the message if not provided
        if consumer_tag is None:
            consumer_tag = message.consumer_tag

        # Look up the subscription
        if consumer_tag not in self.subscribers:
            logger.warning(f"Received message for unknown consumer {consumer_tag}")
            await message.ack()
            return

        try:
            # Deserialize the message body
            if message.content_type == "application/json":
                try:
                    data = json.loads(message.body.decode())
                except json.JSONDecodeError:
                    logger.error("Error decoding JSON message")
                    await message.ack()
                    return
            else:
                data = message.body.decode()

            # Invoke the callback
            await self.subscribers[consumer_tag].callback(data)

            # Acknowledge the message
            await message.ack()

        except Exception as e:
            logger.error(f"Error processing message: {e}")
            # Negative acknowledgement to retry or handle later
            await message.nack(requeue=True)
