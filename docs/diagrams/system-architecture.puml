@startuml IoTSphere System Architecture

!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/
!includeurl ICONURL/devicons/python.puml
!includeurl ICONURL/devicons/postgresql.puml
!includeurl ICONURL/devicons/javascript.puml
!includeurl ICONURL/font-awesome-5/server.puml
!includeurl ICONURL/font-awesome-5/database.puml
!includeurl ICONURL/font-awesome-5/brain.puml
!includeurl ICONURL/font-awesome-5/cogs.puml

skinparam {
    BackgroundColor white
    ArrowColor DarkBlue
    BorderColor DarkBlue
    ComponentBackgroundColor LightSkyBlue
    DatabaseBackgroundColor PaleTurquoise
    ActorBackgroundColor LightGreen
    InterfaceBackgroundColor LightYellow
    PackageBackgroundColor WhiteSmoke
}

title IoTSphere System Architecture - Real-Time Operational Focus

' Define top-level components
package "Frontend Layer" as Frontend {
    [Web UI] as WebUI
    component "Operational Dashboard" as OpDashboard
    component "Maintenance Predictions" as MaintenancePred
    component "Device Management" as DeviceManagement
}

package "API Layer" as API {
    [FastAPI] as FastAPI
    component "Water Heater API" as WaterHeaterAPI
    component "Real-time Operations API" as RealTimeOpsAPI
    component "Predictions API" as PredictionsAPI
}

package "Service Layer" as Services {
    [Operations Service] as OperationsService
    [Prediction Service] as PredictionService
    [Device Service] as DeviceService
}

package "ML Predictions" as Predictions {
    component "Lifespan Estimation" as LifespanPred
    component "Component Failure Prediction" as ComponentFailurePred
    component "Descaling Requirement" as DescalingPred
    [TDD Workflow] as TDDWorkflow
}

package "Data Layer" as Data {
    database "PostgreSQL" as PostgreSQL {
        [Device Data]
        [Operational Data]
        [Readings Data]
    }
    database "TimescaleDB" as TimescaleDB {
        [Time-Series Data]
    }
    [Cache] as Cache
}

package "IoT Devices" as Devices {
    [Water Heaters] as WaterHeaters
    [Vending Machines] as VendingMachines
}

' Define interactions
WebUI --> FastAPI : HTTP Requests
OpDashboard --> RealTimeOpsAPI : Real-time monitoring
MaintenancePred --> PredictionsAPI : Get predictions
DeviceManagement --> WaterHeaterAPI : Manage devices

FastAPI --> OperationsService : Process operations
FastAPI --> PredictionService : Request predictions
FastAPI --> DeviceService : Manage devices

OperationsService --> PostgreSQL : Store/retrieve data
PredictionService --> Predictions : Generate predictions
PredictionService --> Cache : Cache predictions
DeviceService --> PostgreSQL : Store/retrieve device info

LifespanPred --> PostgreSQL : Read data
ComponentFailurePred --> PostgreSQL : Read data
DescalingPred --> PostgreSQL : Read data
TDDWorkflow --> Predictions : Test-driven development flow

PostgreSQL ..> TimescaleDB : Optional extension

WaterHeaters --> FastAPI : Send telemetry
VendingMachines --> FastAPI : Send telemetry

' Add notes about architectural highlights
note bottom of TDDWorkflow
  Test-Driven Development workflow:
  1. Red: Write failing tests
  2. Green: Implement features
  3. Refactor: Improve code quality
end note

note bottom of TimescaleDB
  TimescaleDB is optional.
  Application gracefully degrades
  to standard PostgreSQL if not available.
end note

note bottom of RealTimeOpsAPI
  Focus on real-time operational 
  monitoring rather than historical
  analytics.
end note

note bottom of OpDashboard
  - Status cards for monitoring
  - Temperature/energy gauges
  - Heating cycle tracking
  - Real-time operational metrics
end note

@enduml
