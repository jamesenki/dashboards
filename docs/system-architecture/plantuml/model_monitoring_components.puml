@startuml Model Monitoring Components
!include <C4/C4_Component>

title "Model Monitoring Service Component Diagram - IoTSphere-Refactor"

Container(prediction_services, "Prediction Services", "Python", "Provides prediction capabilities")
Container_Boundary(model_monitoring, "Model Monitoring Service") {
    Component(model_monitoring_router, "Monitoring API Router", "FastAPI Router", "Exposes REST endpoints for model monitoring")
    Component(model_metrics_service, "Model Metrics Service", "Python", "Processes and analyzes model metrics")
    Component(model_registry, "Model Registry", "Python", "Maintains metadata about deployed ML models")
    Component(metric_collector, "Metric Collector", "Python", "Collects performance metrics from models")
    Component(drift_detector, "Drift Detector", "Python/scikit-learn", "Detects data and concept drift in models")
    Component(health_monitor, "Health Monitor", "Python", "Tracks model health and quality metrics")
    Component(alert_manager, "Alert Manager", "Python", "Creates and manages model health alerts")
    Component(model_metrics_repository, "Model Metrics Repository", "Python", "Data access layer for model metrics")
}

Container(config_service, "Configuration Service", "Python", "Provides environment-specific configuration")
ContainerDb(database, "Relational Database", "SQLite/PostgreSQL", "Stores model metrics and alerts")

System_Ext(api_client, "API Client", "Consumer of the monitoring API")

Rel(api_client, model_monitoring_router, "Uses", "REST API")
Rel(model_monitoring_router, model_metrics_service, "Delegates to")

Rel(model_metrics_service, model_registry, "Uses to track models")
Rel(model_metrics_service, metric_collector, "Uses to collect metrics")
Rel(model_metrics_service, drift_detector, "Uses to detect drift")
Rel(model_metrics_service, health_monitor, "Uses to monitor health")
Rel(model_metrics_service, alert_manager, "Uses to manage alerts")
Rel(model_metrics_service, model_metrics_repository, "Uses for data access")

Rel(prediction_services, metric_collector, "Provides metrics to")

Rel(model_metrics_repository, database, "Reads/Writes", "SQLAlchemy ORM")

Rel(config_service, model_metrics_service, "Configures")
Rel(config_service, health_monitor, "Provides thresholds to")
Rel(config_service, alert_manager, "Configures")

LAYOUT_WITH_LEGEND()
@enduml
