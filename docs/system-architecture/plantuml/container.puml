@startuml Container Diagram
!include <C4/C4_Container>

title "IoTSphere Container Diagram"

Person(user, "IoT Platform User", "A user who manages IoT devices and monitors data")
Person(admin, "IoT Platform Administrator", "A system administrator who configures and maintains the platform")

System_Boundary(iotSphere, "IoTSphere Platform") {
    Container(webApp, "Web Application", "Angular", "Provides the user interface for device management, monitoring, and analytics")
    Container(apiServer, "API Server", "Node.js/Express", "Provides device management and data APIs for the web application")
    Container(deviceService, "Device Management Service", "Node.js", "Handles device lifecycle, configuration, and firmware updates")
    Container(monitoringService, "Monitoring Service", "Node.js", "Processes device data, manages alerts, and provides analytics")
    Container(modelMonitoringService, "Model Monitoring Service", "Python/Flask", "Monitors ML models and model performance")
    ContainerDb(database, "Operational Database", "MongoDB", "Stores device configurations, user data, and system settings")
    ContainerDb(timeseriesDB, "Time Series Database", "InfluxDB", "Stores historical device data and metrics")
    Container(messageQueue, "Message Queue", "RabbitMQ", "Handles asynchronous communication between services")
}

System_Ext(devices, "IoT Devices", "Connected devices that collect and transmit sensor data")
System_Ext(monitoringSystems, "Monitoring Services", "External systems that provide monitoring capabilities")

Rel(user, webApp, "Uses to manage devices and view dashboards")
Rel(admin, webApp, "Configures and monitors the system")

Rel(webApp, apiServer, "Makes API calls to", "JSON/HTTPS")
Rel(webApp, monitoringService, "Gets device status and metrics from", "JSON/HTTPS")
Rel(webApp, modelMonitoringService, "Visualizes model performance via", "JSON/HTTPS")

Rel(apiServer, deviceService, "Routes device management requests to", "JSON/HTTP")
Rel(apiServer, monitoringService, "Routes monitoring requests to", "JSON/HTTP")
Rel(apiServer, database, "Reads from and writes to", "MongoDB Driver")

Rel(deviceService, messageQueue, "Publishes device events to", "AMQP")
Rel(deviceService, database, "Reads from and writes to", "MongoDB Driver")
Rel(deviceService, devices, "Manages and configures", "MQTT/HTTP")

Rel(monitoringService, messageQueue, "Consumes device events from", "AMQP")
Rel(monitoringService, timeseriesDB, "Reads from and writes to", "InfluxDB API")
Rel(monitoringService, modelMonitoringService, "Forwards model events to", "JSON/HTTP")
Rel(monitoringService, monitoringSystems, "Integrates with", "REST API")

Rel(modelMonitoringService, timeseriesDB, "Reads metrics from", "InfluxDB API")

Rel_Back(devices, messageQueue, "Sends telemetry and status data to", "MQTT")

LAYOUT_WITH_LEGEND()
@enduml
