#!/usr/bin/env python3
"""
Import Fix Script for IoTSphere
This script attempts to fix import issues by modifying sys.path
and creating necessary package structure.
"""
import importlib.util
import os
import sys
from pathlib import Path


def fix_api_routes():
    """Fix missing package structure for api.routes"""
    # Get the absolute path to the src directory
    src_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "src")
    api_dir = os.path.join(src_dir, "api")
    routes_dir = os.path.join(api_dir, "routes")

    # Create __init__.py files if they don't exist
    for directory in [api_dir, routes_dir]:
        init_file = os.path.join(directory, "__init__.py")
        if not os.path.exists(init_file):
            print(f"Creating missing __init__.py in {directory}")
            with open(init_file, "w") as f:
                f.write("# Generated by fix_imports.py\n")

    # Create a stub for test_websocket if it doesn't exist
    test_websocket = os.path.join(routes_dir, "test_websocket.py")
    if not os.path.exists(test_websocket):
        print(f"Creating stub for missing test_websocket.py")
        with open(test_websocket, "w") as f:
            f.write(
                """# Generated by fix_imports.py as a stub
from fastapi import APIRouter

router = APIRouter(prefix="/api/test-websocket", tags=["test-websocket"])

@router.get("/healthcheck")
async def healthcheck():
    return {"status": "ok"}
"""
            )

    # Add src to sys.path if it's not there
    if src_dir not in sys.path:
        sys.path.insert(0, src_dir)


def fix_infrastructure_imports():
    """Fix missing package structure for infrastructure module"""
    # Get the absolute path to the src directory
    src_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "src")
    infra_dir = os.path.join(src_dir, "infrastructure")
    messaging_dir = os.path.join(infra_dir, "messaging")
    websocket_dir = os.path.join(infra_dir, "websocket")

    # Create __init__.py files if they don't exist
    for directory in [infra_dir, messaging_dir, websocket_dir]:
        init_file = os.path.join(directory, "__init__.py")
        if not os.path.exists(init_file):
            print(f"Creating missing __init__.py in {directory}")
            with open(init_file, "w") as f:
                f.write("# Generated by fix_imports.py\n")

    # Create a symbolic link or update sys.path to make infrastructure importable from the top level
    # Method 1: Add parent dir of 'src' to sys.path
    project_root = os.path.dirname(os.path.abspath(__file__))
    if project_root not in sys.path:
        sys.path.insert(0, project_root)
        print(f"Added {project_root} to sys.path for top-level imports")

    # Method 2: Add src to sys.path if it's not there
    if src_dir not in sys.path:
        sys.path.insert(0, src_dir)
        print(f"Added {src_dir} to sys.path for src-relative imports")

    # Create a special __init__.py in the project root that redirects infrastructure imports
    infra_redirect_init = os.path.join(project_root, "infrastructure.py")
    if not os.path.exists(infra_redirect_init):
        print(f"Creating infrastructure import redirector")
        with open(infra_redirect_init, "w") as f:
            f.write(
                """# Generated by fix_imports.py - Import redirector
from src.infrastructure import *
"""
            )


if __name__ == "__main__":
    fix_api_routes()
    fix_infrastructure_imports()
    print("Package structure fixed successfully. You can now run the application.")
